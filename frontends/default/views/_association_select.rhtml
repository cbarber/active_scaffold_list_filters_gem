<%

	ar_class = filter.association_class
	association = filter.core.model.reflect_on_association(filter.association_name)
  assocation_key = association.primary_key_name

  if association.macro == :belongs_to
    associated_objs = filter.core.model.find(:all, :include => filter.association_name, :select => "distinct #{assocation_key}", :conditions => "#{assocation_key} is not null")
  else
    associated_objs = filter.core.model.find(:all, :include => filter.association_name)
  end
    
  associated_values = associated_objs.map{|u| u.send(filter.association_name) }.flatten.uniq
  # associated_values = filter.core.model.all.map{|vc| vc.send(filter.association_name) }.flatten.uniq
  associated_values.delete(nil)
  associated_values.delete([])
	associated_values.sort!{|a,b| a.to_label <=> b.to_label }
    
-%>

<div>
<%= select_tag list_filter_input_name(filter), "<option></option>"+options_from_collection_for_select(associated_values, 'id', 'to_label') %>    
</div>
